{{#useModelClasses}}class{{/useModelClasses}}{{^useModelClasses}}struct{{/useModelClasses}} {{classname}}: Decodable {

{{#allVars}}
{{#isEnum}}
{{> modelInlineEnumDeclaration}}
{{/isEnum}}
{{/allVars}}
{{#allVars}}
{{#isEnum}}
    {{^required}}@SafeOptionalDecodable {{/required}}{{#required}}let{{/required}}{{^required}}var{{/required}} {{name}}: CodableEnum<{{{datatypeWithEnum}}}>{{^required}}?{{/required}}{{#defaultValue}} = {{{defaultValue}}}{{/defaultValue}}
{{/isEnum}}
{{^isEnum}}
    {{^required}}@SafeOptionalDecodable {{/required}}{{#required}}let{{/required}}{{^required}}var{{/required}} {{name}}: {{{datatype}}}{{^required}}?{{/required}}{{#defaultValue}} = {{{defaultValue}}}{{/defaultValue}}{{#objcCompatible}}{{#vendorExtensions.x-swift-optional-scalar}}
    var {{name}}Num: NSNumber? {
        get {
            return {{name}}.map({ return NSNumber(value: $0) })
        }
    }{{/vendorExtensions.x-swift-optional-scalar}}{{/objcCompatible}}
{{/isEnum}}
{{/allVars}}

{{#hasVars}}
    init({{#allVars}}{{name}}: {{#isEnum}}CodableEnum<{{/isEnum}}{{{datatypeWithEnum}}}{{#isEnum}}>{{/isEnum}}{{^required}}?{{/required}}{{#hasMore}}, {{/hasMore}}{{/allVars}}) {
        {{#allVars}}
        self.{{name}} = {{name}}
        {{/allVars}}
    }
{{/hasVars}}

{{#additionalPropertiesType}}
    var additionalProperties: [String:{{{additionalPropertiesType}}}] = [:]

    subscript(key: String) -> {{{additionalPropertiesType}}}? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        {{#allVars}}
        try container.encode{{^required}}IfPresent{{/required}}({{{name}}}, forKey: "{{{baseName}}}")
        {{/allVars}}
        try container.encodeMap(additionalProperties)
    }

    init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        {{#allVars}}
        {{name}} = try container.decode{{^required}}IfPresent{{/required}}(CodableEnum<{{{datatypeWithEnum}}}>.self, forKey: "{{{baseName}}}")
        {{/allVars}}
        var nonAdditionalPropertyKeys = Set<String>()
        {{#allVars}}
        nonAdditionalPropertyKeys.insert("{{{baseName}}}")
        {{/allVars}}
        additionalProperties = try container.decodeMap({{{additionalPropertiesType}}}.self, excludedKeys: nonAdditionalPropertyKeys)
    }

{{/additionalPropertiesType}}
{{^skip_generate_coding_keys}}
{{^additionalPropertiesType}}{{#vendorExtensions.x-codegen-has-escaped-property-names}}
    enum CodingKeys: String, CodingKey { {{#allVars}}
        case {{name}}{{#vendorExtensions.x-codegen-escaped-property-name}} = "{{{baseName}}}"{{/vendorExtensions.x-codegen-escaped-property-name}}{{/allVars}}
    }
{{/vendorExtensions.x-codegen-has-escaped-property-names}}{{/additionalPropertiesType}}
{{/skip_generate_coding_keys}}

}
